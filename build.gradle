buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}
plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'maven'
    id 'com.github.johnrengelman.processes' version '0.3.0'
    id 'signing'
    id "com.github.hierynomus.license" version '0.13.1'
}


group = 'com.datastax'
version = '0.1.3'

description = "Remote JUnit runner"

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext.defaultPropertyValue = { name, value, Closure converter = null ->
    if (!ext.has(name)) ext.set(name, converter == null ? value : converter.call(value))
    else if (converter) ext.set(name, converter.call(ext.get(name)))
    ext.get(name)
}

configurations {

    provided
    gpg
}

repositories {

    mavenCentral()
    maven {
        url = 'http://maven.datastax.lan:8081/nexus/content/repositories/dse'
    }

}

dependencies {
    compile 'org.slf4j:slf4j-api:1.6.0'
    compile 'junit:junit:4.12'
    compile 'com.healthmarketscience.rmiio:rmiio:2.1.0'
    compile ('org.unitils:unitils-core:3.4.2') { transitive = false }

    provided 'org.slf4j:slf4j-simple:1.6.0'

    testCompile 'pl.pragmatists:JUnitParams:1.0.4'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.5'
    testRuntime "cglib:cglib-nodep:3.1"

    gpg 'com.datastax.dse:gpg-secring:1.0@gpg'
}

signing {
    sign configurations.archives
}

javadoc {
    // disable the crazy super-strict doclint tool in Java 8
    //noinspection SpellCheckingInspection
    options.addStringOption('Xdoclint:none', '-quiet')
}
signArchives.doFirst {
    defaultPropertyValue('signing.secretKeyRingFile', configurations.gpg.singleFile.absolutePath)
    defaultPropertyValue('signing.keyId', '54B279ED')
}

license {
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    header file('codequality/HEADER')
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

idea {
    project {
        vcs = 'Git'
    }
    module {
        scopes.COMPILE.plus += [configurations.provided]
    }
}

import com.github.jengelman.gradle.plugins.processes.tasks.JavaFork
task startTestServer(type: JavaFork, dependsOn: testClasses) {
    main = 'com.datastax.junit.remote.RemoteTestServer'
    classpath = test.classpath
}

task stopTestServer << {
    startTestServer.processHandle.abort()
}

test {
    dependsOn startTestServer
    finalizedBy stopTestServer
    exclude '**/*$*'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}


// OSSRH publication
uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // Target repository
            repository(url: defaultPropertyValue('publishRepoUrl', "https://oss.sonatype.org/service/local/staging/deploy/maven2/")) {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            snapshotRepository(url: defaultPropertyValue('publishSnapshotRepoUrl', "https://oss.sonatype.org/content/repositories/snapshots/")) {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            pom.project {
                name project.name
                description project.description
                packaging 'jar'
                url 'https://github.com/datastax/remote-junit-runner'

                scm {
                    connection 'scm:git:https://github.com/datastax/remote-junit-runner.git'
                    developerConnection 'scm:git:git@github.com:datastax/remote-junit-runner.git'
                    url 'https://github.com/datastax/remote-junit-runner.git'
                }

                licenses {
                    license {
                        name 'Apache License Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Various'
                        organization = 'DataStax'
                    }
                }

            }
        }
    }
}

